<?php

/**
 * Base class with some helper methods.
 */
class UUIDTestCase extends DrupalWebTestCase {

  function setUp() {
    parent::setUp(func_get_args());
  }

  /**
   * Helper function that asserts a UUID.
   */
  function assertUUID($uuid, $message = NULL) {
    $this->assertTrue(uuid_is_valid($uuid), $message);
  }

}

/**
 * Tests for the UUID API functions.
 */
class UUIDAPITestCase extends UUIDTestCase {

  public static function getInfo() {
    return array(
      'name' => 'UUID API',
      'description' => 'Tests the UUID API functions.',
      'group' => 'UUID',
    );
  }

  function setUp() {
    parent::setUp('uuid');
  }

  function testAPIFunctions() {
    // This is a valid UUID, we know that.
    $valid_uuid = '0ab26e6b-f074-4e44-9da6-1205fa0e9761';
    // Test the uuid_is_valid() function.
    $this->assertUUID($valid_uuid, 'UUID validation works.');

    // The default generator is 'php'.
    $uuid = uuid_generate();
    $this->assertUUID($uuid, 'PHP generator works.');

    // Test the 'mysql' generator.
    variable_set('uuid_generator', 'mysql');
    drupal_static_reset('uuid_generate');
    $uuid = uuid_generate();
    $this->assertUUID($uuid, 'MySQL generator works.');
  }

}

/**
 * Tests for the Entity API implementation of the UUID API.
 */
class UUIDEntityTestCase extends UUIDTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Entity implementation',
      'description' => 'Tests the Entity API implementation of the UUID API.',
      'group' => 'UUID',
    );
  }

  function setUp() {
    parent::setUp('uuid', 'entity');
  }

  /**
   * Tests for making sure UUIDs are properly generated for entities.
   */
  function testEntityCRUD() {
    // Create some entities that we will work with.
    $node = $this->drupalCreateNode(array('title' => 'original title'));
    $user = $this->drupalCreateUser();

    // Test if UUID was properly generated.
    $this->assertUUID($node->uuid, 'Node UUID was generated.');
    $this->assertUUID($node->vuuid, 'Node revision UUID was generated.');
    $this->assertUUID($user->uuid, 'User UUID was generated.');

    // Test node update, without creating new revision.
    $node_test = clone $node;
    $node_test->title = 'new title';
    $node_test->revision = FALSE;
    node_save($node_test);
    // Load the updated node.
    $node_test = node_load($node->nid, FALSE, TRUE);
    $this->assertEqual($node_test->uuid, $node->uuid, 'Node UUID was intact after update, when not creating new revision.');
    $this->assertEqual($node_test->vuuid, $node->vuuid, 'Node revision UUID was intact after updating, when not creating new revision.');

    // Test node update, with new revision.
    $node_test = clone $node;
    $node_test->title = 'newer title';
    $node_test->revision = TRUE;
    node_save($node_test);
    $node_test = node_load($node->nid, FALSE, TRUE);
    $this->assertEqual($node_test->uuid, $node->uuid, 'Node UUID was intact after updating, when creating new revision.');
    $this->assertNotEqual($node_test->vuuid, $node->vuuid, 'A new node revision UUID was generated, when creating new revision.');
    $this->assertUUID($node_test->vuuid, 'The new node revision UUID was valid.');

    // Test updating user.
    $user_test = clone $user;
    user_save($user_test, array('name' => 'new name'));
    $user_test = user_load($user->uid, TRUE);
    $this->assertEqual($user_test->uuid, $user->uuid, 'User UUID was intact after update.');
  }

  /**
   * Tests for the Entity API functions provided to support UUID operations.
   */
  function testUUIDEntityFunctions() {
    // Create some entities that we will work with.
    $node = $this->drupalCreateNode(array('title' => 'original title'));
    $user = $this->drupalCreateUser();

    // Test entity_get_id_by_uuid().
    $nids = entity_get_id_by_uuid('node', array($node->uuid), FALSE);
    $this->assertTrue(in_array($node->nid, $nids), 'Lookup of entity ID works.');
    $vids = entity_get_id_by_uuid('node', array($node->vuuid), TRUE);
    $this->assertTrue(in_array($node->vid, $vids), 'Lookup of entity revision ID works.');

    // Test entity_get_uuid_by_id().
    $uuids = entity_get_uuid_by_id('node', array($node->nid), FALSE);
    $this->assertTrue(in_array($node->uuid, $uuids), 'Lookup of entity UUID works.');
    $vuuids = entity_get_uuid_by_id('node', array($node->vid), TRUE);
    $this->assertTrue(in_array($node->vuuid, $vuuids), 'Lookup of entity revision UUID works.');

    // Test entity_load_by_uuid().
    $node_test = reset(entity_load_by_uuid('node', array($node->uuid), array(), TRUE));
    $this->assertEqual($node_test->nid, $node->nid, 'Node was correctly loaded by UUID.');

    $user_test = reset(entity_load_by_uuid('user', array($user->uuid), array(), TRUE));
    $this->assertEqual($user_test->uid, $user->uid, 'User was correctly loaded by UUID.');

    // Test entity_save_by_uuid() for an entity type that support
    // revisions (node).
    $node_test = clone $node;
    $node_test->nid = rand();
    $node_test->vid = rand();
    $node_test->title = 'new title';
    $node_test->revision = FALSE;
    entity_save_by_uuid('node', $node_test);

    // This should still give us the updated node.
    $node_test = node_load($node->nid, FALSE, TRUE);
    $this->assertEqual($node_test->title, 'new title', 'Saving node by UUID mapped to correct node, when not creating new revision.');
    $this->assertEqual($node_test->uuid, $node->uuid, 'Node UUID was intact after saving by UUID, when not creating new revision.');
    $this->assertEqual($node_test->vuuid, $node->vuuid, 'Node revison UUID was intact after saving by UUID, when not creating new revision.');

    // Test the same thing again, but now triggering a new revision.
    $node_test = node_load($node->nid, FALSE, TRUE);
    $node_test->nid = rand();
    $node_test->vid = rand();
    $node_test->title = 'newer title';
    $node_test->revision = TRUE;
    entity_save_by_uuid('node', $node_test);

    $node_test = node_load($node->nid, FALSE, TRUE);
    $this->assertEqual($node_test->title, 'newer title', 'Saving node by UUID mapped to correct node, when creating new revision.');
    $this->assertEqual($node_test->uuid, $node->uuid, 'Node UUID was intact after saving by UUID, when creating new revision.');
    $this->assertNotEqual($node_test->vuuid, $node->vuuid, 'A new node revison UUID was generated after saving by UUID, when creating new revision.');
    $this->assertUUID($node_test->vuuid, 'New node revision UUID was valid.');

    // Test entity_save_by_uuid() for an entity type that doesn't support
    // revisions (user).
    $user_test = clone $user;
    $user_test->uid = rand();
    $user_test->name = 'new name';
    entity_save_by_uuid('user', $user_test);

    $user_test = user_load($user->uid, TRUE);
    $this->assertEqual($user_test->name, 'new name', 'Saving user by UUID mapped to correct user.');
    $this->assertEqual($user_test->uuid, $user->uuid, 'User UUID was intact after saving by UUID.');
  }

}

/**
 * Tests for the UUID synchronization.
 */
class UUIDSyncTestCase extends UUIDTestCase {

  public static function getInfo() {
    return array(
      'name' => 'UUID sync',
      'description' => 'Tests the UUID synchronization.',
      'group' => 'UUID',
    );
  }

  function setUp() {
    parent::setUp();
  }

  /**
   * Helper function that asserts that a database table column exists.
   *
   * @todo There are something wiered around this assertion.
   */
  function assertTableColumn($table, $column, $message) {
    $result = db_query("SHOW COLUMNS FROM {$table}");
    $exists = FALSE;
    foreach ($result as $record) {
      if ($record->field == $column) {
        $exists = TRUE;
        break;
      }
    }
    $this->assertTrue($exists, $message);
  }

  function testSync() {
    // These entities will not have UUID from the start, since the UUID module
    // isn't installed yet.
    $node = $this->drupalCreateNode();
    $user = $this->drupalCreateUser();

    $this->assertTrue(!isset($node->uuid), "Node has no UUID before installation of UUID module.");
    $this->assertTrue(!isset($node->vuuid), "Node has no revision UUID before installation of UUID module.");
    $this->assertTrue(!isset($user->uuid), "User has no UUID before installation of UUID module.");

    // Now enable the UUID module.
    module_enable(array('uuid'), TRUE);
    drupal_flush_all_caches();
    drupal_static_reset();

    // Check that the UUID column was generated for {node}.
    $this->assertTableColumn('node', 'uuid', 'UUID column was generated for the node table.');
    $this->assertTableColumn('node_revision', 'vuuid', 'Revision UUID column was generated for the node_revision table.');
    $this->assertTableColumn('users', 'uuid', 'UUID column was generated for the user table.');

    // Login with a user and click the sync button.
    $web_user = $this->drupalCreateUser(array('administer uuid'));
    $this->drupalLogin($web_user);
    $this->drupalPost('admin/config/system/uuid', array(), t('Create missing UUIDs'));

    // Test if UUID was generated for nodes.
    $node_test = node_load($node->nid, FALSE, TRUE);
    $this->assertUUID($node_test->uuid, 'Node UUID was generated when clicking the sync button.');
    $this->assertUUID($node_test->vuuid, 'Node revision UUID was generated when clicking the sync button.');

    // Test if UUID was generated for users.
    $user_test = user_load($user->uid, TRUE);
    $this->assertUUID($user_test->uuid, 'User UUID was generated when clicking the sync button.');
  }

}
