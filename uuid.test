<?php

/**
 * Base class with some helper methods.
 */
class UUIDTestCase extends DrupalWebTestCase {

  function assertUUID($uuid, $message = NULL) {
    $this->assertTrue(uuid_is_valid($uuid), $message);
  }

}

/**
 * Tests for the UUID API functions.
 */
class UUIDAPITestCase extends UUIDTestCase {

  public static function getInfo() {
    return array(
      'name' => 'UUID API',
      'description' => 'Tests the UUID API functions.',
      'group' => 'UUID',
    );
  }

  function setUp() {
    parent::setUp('uuid');
  }

  function testAPIFunctions() {
    // This is a valid UUID, we know that.
    $valid_uuid = '0ab26e6b-f074-4e44-9da6-1205fa0e9761';
    // Test the uuid_is_valid() function.
    $this->assertUUID($valid_uuid, 'UUID validation works.');

    // The default generator is 'php'.
    $uuid = uuid_generate();
    $this->assertUUID($uuid, 'PHP generator works.');

    // Test the 'mysql' generator.
    variable_set('uuid_generator', 'mysql');
    drupal_static_reset('uuid_generate');
    $uuid = uuid_generate();
    $this->assertUUID($uuid, 'MySQL generator works.');
  }

}

/**
 * Tests for the Entity API implementation of the UUID API.
 */
class UUIDEntityTestCase extends UUIDTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Entity implementation',
      'description' => 'Tests the Entity API implementation of the UUID API.',
      'group' => 'UUID',
    );
  }

  function setUp() {
    parent::setUp('uuid', 'entity', 'taxonomy', 'comment');
  }

  /**
   * Tests for making sure UUIDs are properly generated for entities.
   */
  function testCRUD() {
    // Create a node to work with.
    $node = $this->drupalCreateNode(array('title' => 'original title'));
    $nid = $node->nid;
    $original_uuid = $node->uuid;
    $original_vuuid = $node->vuuid;
    // Test if UUID was properly generated.
    $this->assertUUID($node->uuid, 'Node UUID was generated.');
    $this->assertUUID($node->vuuid, 'Node revision UUID was generated.');

    // Test node update, without creating new revision.
    $node->title = 'new title';
    $node->revision = FALSE;
    node_save($node);
    // Load the updated node.
    $node = node_load($nid);
    $this->assertEqual($original_uuid, $node->uuid, 'Node UUID was intact after update, when not creating new revision.');
    $this->assertEqual($original_vuuid, $node->vuuid, 'Node revision UUID was intact after updating, when not creating new revision.');

    // Test node update, with new revision.
    $node->title = 'newer title';
    $node->revision = TRUE;
    node_save($node);
    $node = node_load($nid);
    $this->assertEqual($original_uuid, $node->uuid, 'Node UUID was intact after updating, when creating new revision.');
    $this->assertNotEqual($original_vuuid, $node->vuuid, 'A new node revision UUID was generated, when creating new revision.');
    $this->assertUUID($node->vuuid, 'The new node revision UUID was valid.');

    // Test generating UUID for a user.
    $user = $this->drupalCreateUser();
    $uid = $user->uid;
    $original_uuid = $user->uuid;
    $this->assertUUID($original_uuid, 'User UUID was generated.');

    // Test updating user.
    user_save($user, array('name' => 'new name'));
    $user = user_load($uid);
    $this->assertEqual($original_uuid, $user->uuid, 'User UUID was intact after update.');
  }

  /**
   * Tests for the Entity API functions provided to support UUID operations.
   */
  function testUUIDEntityAPIFunctions() {

    // TODO: Test entity_get_id_by_uuid().

    // TODO: Test entity_get_uuid_by_id().

    // TODO: Test entity_load_by_uuid().

    // Test entity_save_by_uuid().
    $node = $this->drupalCreateNode(array('title' => 'original title'));
    $nid = $node->nid;
    $original_uuid = $node->uuid;
    $original_vuuid = $node->vuuid;
    // We change the node ID and revision ID but still keeps the same UUIDs.
    // Saving it should still make it map to the "old" IDs.
    $node->nid = rand();
    $node->vid = rand();
    $node->title = 'new title';
    $node->revision = FALSE;
    entity_save_by_uuid('node', $node);

    // This should still give us the updated node.
    $node = node_load($nid);
    $this->assertEqual($node->title, 'new title', 'Saving node by UUID mapped to correct node, when not creating new revision.');
    $this->assertEqual($original_uuid, $node->uuid, 'Node UUID was intact after saving by UUID, when not creating new revision.');
    $this->assertEqual($original_vuuid, $node->vuuid, 'Node revison UUID was intact after saving by UUID, when not creating new revision.');

    // Test the same thing again, but now triggering a new revision.
    $node = node_load($nid);
    $node->nid = rand();
    $node->vid = rand();
    $node->title = 'newer title';
    $node->revision = TRUE;
    entity_save_by_uuid('node', $node);

    $node = node_load($nid);
    $this->assertEqual($node->title, 'newer title', 'Saving node by UUID mapped to correct node, when creating new revision.');
    $this->assertEqual($original_uuid, $node->uuid, 'Node UUID was intact after saving by UUID, when creating new revision.');
    $this->assertNotEqual($original_vuuid, $node->vuuid, 'A new node revison UUID was generated after saving by UUID, when creating new revision.');
    $this->assertUUID($node->vuuid, 'New node revision UUID was valid.');

    // Test saving user by UUID.
    $user = $this->drupalCreateUser();
    $uid = $user->uid;
    $original_uuid = $user->uuid;
    $user->uid = rand();
    $user->name = 'new name';
    entity_save_by_uuid('user', $user);

    $user = user_load($uid);
    $this->assertEqual($user->name, 'new name', 'Saving user by UUID mapped to correct user.');
    $this->assertEqual($original_uuid, $user->uuid, 'User UUID was intact after saving by UUID.');
  }

}

/**
 * Tests for the UUID synchronization.
 */
class UUIDSyncTestCase extends UUIDTestCase {

  public static function getInfo() {
    return array(
      'name' => 'UUID sync',
      'description' => 'Tests the UUID synchronization.',
      'group' => 'UUID',
    );
  }

  function setUp() {
    parent::setUp('uuid', 'taxonomy', 'comment');
  }

  function testSync() {
    // TODO: Test the UUID synchronization.
  }

}
